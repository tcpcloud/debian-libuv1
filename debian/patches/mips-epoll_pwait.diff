From de298f5ae62b1338cf830d5833bae2486931afaa Mon Sep 17 00:00:00 2001
From: Luca Bruno <lucab@debian.org>
Date: Tue, 12 May 2015 22:04:35 +0200
Subject: [PATCH] unix: use libc-provided epoll_pwait wrapper

Further fix for sigmask size calculation on top of 751ac48.
We now use epoll_pwait() wrapper from libc, which takes care
of passing proper sigset_t size to kernel.

This is more portable, as some arch have a larger sigmask and
kernel explicitely checks size parameter to match sizeof(sigset_t).
Spotted as a uv_loop_configure regression on MIPS.

This fixes #335.

Signed-off-by: Luca Bruno <lucab@debian.org>
---
 src/unix/linux-core.c     | 15 ++++++++-------
 src/unix/linux-syscalls.c | 21 +++++++--------------
 src/unix/linux-syscalls.h |  2 +-
 3 files changed, 16 insertions(+), 22 deletions(-)

--- a/src/unix/linux-core.c
+++ b/src/unix/linux-core.c
@@ -33,6 +33,7 @@
 #include <sys/prctl.h>
 #include <sys/sysinfo.h>
 #include <unistd.h>
+#include <signal.h>
 #include <fcntl.h>
 #include <time.h>
 
@@ -159,8 +160,8 @@
   QUEUE* q;
   uv__io_t* w;
   sigset_t sigset;
-  uint64_t sigmask;
   uint64_t base;
+  int is_sigmasked;
   int nevents;
   int count;
   int nfds;
@@ -208,11 +209,11 @@
     w->events = w->pevents;
   }
 
-  sigmask = 0;
+  is_sigmasked = 0;
   if (loop->flags & UV_LOOP_BLOCK_SIGPROF) {
     sigemptyset(&sigset);
     sigaddset(&sigset, SIGPROF);
-    sigmask |= 1 << (SIGPROF - 1);
+    is_sigmasked = 1;
   }
 
   assert(timeout >= -1);
@@ -227,16 +228,16 @@
     if (sizeof(int32_t) == sizeof(long) && timeout >= max_safe_timeout)
       timeout = max_safe_timeout;
 
-    if (sigmask != 0 && no_epoll_pwait != 0)
+    if (is_sigmasked != 0 && no_epoll_pwait != 0)
       if (pthread_sigmask(SIG_BLOCK, &sigset, NULL))
         abort();
 
-    if (no_epoll_wait != 0 || (sigmask != 0 && no_epoll_pwait == 0)) {
+    if (no_epoll_wait != 0 || (is_sigmasked != 0 && no_epoll_pwait == 0)) {
       nfds = uv__epoll_pwait(loop->backend_fd,
                              events,
                              ARRAY_SIZE(events),
                              timeout,
-                             sigmask);
+                             &sigset);
       if (nfds == -1 && errno == ENOSYS)
         no_epoll_pwait = 1;
     } else {
@@ -248,7 +249,7 @@
         no_epoll_wait = 1;
     }
 
-    if (sigmask != 0 && no_epoll_pwait != 0)
+    if (is_sigmasked != 0 && no_epoll_pwait != 0)
       if (pthread_sigmask(SIG_UNBLOCK, &sigset, NULL))
         abort();
 
--- a/src/unix/linux-syscalls.c
+++ b/src/unix/linux-syscalls.c
@@ -22,6 +22,7 @@
 #include "linux-syscalls.h"
 #include <unistd.h>
 #include <signal.h>
+#include <sys/epoll.h>
 #include <sys/syscall.h>
 #include <sys/types.h>
 #include <errno.h>
@@ -334,21 +335,13 @@
                     struct uv__epoll_event* events,
                     int nevents,
                     int timeout,
-                    uint64_t sigmask) {
+                    const sigset_t* sigmask) {
 #if defined(__NR_epoll_pwait)
-  int result;
-  result = syscall(__NR_epoll_pwait,
-                   epfd,
-                   events,
-                   nevents,
-                   timeout,
-                   &sigmask,
-                   sizeof(sigmask));
-#if MSAN_ACTIVE
-  if (result > 0)
-    __msan_unpoison(events, sizeof(events[0]) * result);
-#endif
-  return result;
+  return epoll_pwait(epfd,
+                     (struct epoll_event *) events,
+                     nevents,
+                     timeout,
+                     sigmask);
 #else
   return errno = ENOSYS, -1;
 #endif
--- a/src/unix/linux-syscalls.h
+++ b/src/unix/linux-syscalls.h
@@ -131,7 +131,7 @@
                     struct uv__epoll_event* events,
                     int nevents,
                     int timeout,
-                    uint64_t sigmask);
+                    const sigset_t* sigmask);
 int uv__eventfd2(unsigned int count, int flags);
 int uv__inotify_init(void);
 int uv__inotify_init1(int flags);
